function ensureExists(paramName, param) {
    if (typeof param === 'undefined') {
        throw new Error(`Parameter ${paramName} is requried!`);
    }
}

const priorityMapping = {
    2: 'V',
    3: 'D',
    4: 'I',
    5: 'W',
    6: 'E',
    7: 'A',
};


function getStringParts(str) {
    const parts = [];
    let acc = '';
    let isString = false;
    for (char of str) {
        if (isString) {
            if (char === '"') {
                isString = false;
                parts.push(acc);
                acc = '';
            } else {
                acc += char;
            }
        } else if (char === '"') {
            isString = true;
        }
    }
    return parts;
}


const argv = require('yargs').argv
const fs = require('fs');

const pathToLogs = argv.logsJSON; //Genereated by ./index.js
const pathToLogAnalysis = argv.logAnalysis; //Generated by log-searcher (https://github.com/isnit0/log-searcher.git)

ensureExists('logsJSON', pathToLogs);
ensureExists('logAnalysis', pathToLogAnalysis);

const recordedLogs = require(pathToLogs);
const logStatements = require(pathToLogAnalysis).data;

const logsByPriority = recordedLogs
    .reduce((acc, log) => {
        acc[priorityMapping[log.priority]] = acc[priorityMapping[log.priority]] || [];
        acc[priorityMapping[log.priority]].push(log);
        return acc;
    }, {});

const coverageReportData = Object.keys(logStatements)
    .reduce((acc, filename) => {
        const statements = logStatements[filename].map(log => {
            const isCovered = matchStatementToLogs(log, recordedLogs);
            return {
                originalLog: log,
                isCovered
            };
        });
        acc[filename] = statements;
        return acc;
    }, {});


function matchStatementToLogs(log, recordedLogs) {
    const stringParts = getStringParts(log.message);
    return !!recordedLogs.find(rLog => { // rLog contains each of the string parts
        return stringParts.every(part => !!~rLog.message.indexOf(part));
    });
}


fs.writeFileSync(`./reportData.json`, JSON.stringify(coverageReportData));